{
  "name": "Generar Indicadores",
  "nodes": [
    {
      "parameters": {
        "mode": "load",
        "tableName": {
          "__rl": true,
          "value": "glosario_chunks",
          "mode": "list",
          "cachedResultName": "glosario_chunks"
        },
        "prompt": "={{ `${$json.objetivo_actual.texto || ''} ${$json.objetivo_actual.contenido || ''} ${$json.objetivo_actual.metodologia || ''}` }}",
        "topK": 100,
        "options": {
          "queryName": "match_glosario_chunks"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        752,
        1024
      ],
      "id": "c479768a-ccb9-4322-9b3f-9c177794df10",
      "name": "RAG de Dominio",
      "credentials": {
        "supabaseApi": {
          "id": "m0DUcQthM94wIR7O",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        832,
        1248
      ],
      "id": "f1a56211-8269-40e9-9835-8e39b151901f",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "1fRbxclakan4SB2c",
          "name": "Api 1"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1632,
        1248
      ],
      "id": "5367768d-96e8-4c35-8d2c-350a9f17f62e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "1fRbxclakan4SB2c",
          "name": "Api 1"
        }
      }
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "generar-indicadores",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        80,
        1024
      ],
      "id": "a051ebfe-8956-4ec4-8fc8-f1ea3a75465f",
      "name": "Webhook",
      "webhookId": "0b0f8ddd-f0bb-476b-ac21-9e81f74f2c6c"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Formatear Salida Final').first().json }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1328,
        720
      ],
      "id": "e317bab9-00c6-4eb8-8bb3-3380649b39de",
      "name": "Respuesta Exitosa (200)"
    },
    {
      "parameters": {
        "jsCode": "// Leemos la salida del agente final en nuestra cadena: 'Agente 3 - Supervisor'.\nconst llmOutput = $('Agente 3 - Supervisor').first().json.output;\n\n// Los datos originales ahora vienen del constructor del Agente 3.\nconst entradaOriginal = $('Constructor de Prompt (Agente 3 - Supervisor)').first().json; \nconst { estructuraMEI } = entradaOriginal;\n\nlet parsedJson;\n\n// --- INICIO DE LA CORRECCIÓN CLAVE ---\n// Usamos una expresión regular para encontrar el primer bloque JSON válido en el texto.\n// Esto maneja el caso en que el LLM añade texto antes o después del JSON.\nconst jsonRegex = /\\[[\\s\\S]*\\]/; // Busca un array que empieza con [ y termina con ]\nconst jsonMatch = llmOutput.match(jsonRegex);\n\nif (jsonMatch && jsonMatch[0]) {\n  try {\n    // Intentamos parsear solo la parte que coincide con el JSON.\n    parsedJson = JSON.parse(jsonMatch[0]);\n  } catch (e) {\n    parsedJson = null; // Si el bloque extraído sigue siendo inválido, asignamos null.\n  }\n} else {\n  parsedJson = null; // Si no se encuentra ningún bloque JSON, asignamos null.\n}\n// --- FIN DE LA CORRECCIÓN CLAVE ---\n\n\nif (!parsedJson || !Array.isArray(parsedJson) || parsedJson.length === 0) {\n    return []; // Falla si no se pudo parsear, no es un array o está vacío.\n}\n\nlet requiredKeys = [];\nif (estructuraMEI === 'MEI-Actualizado') {\n  requiredKeys = ['indicador', 'justificacionPedagogica'];\n} else if (estructuraMEI === 'MEI-Antiguo') {\n  requiredKeys = ['habilidad', 'contenido', 'condicion_contexto', 'justificacionPedagogica'];\n}\n\nconst isStructureValid = parsedJson.every(item => \n    typeof item === 'object' && \n    item !== null && \n    requiredKeys.every(key => Object.prototype.hasOwnProperty.call(item, key))\n);\n\nif (isStructureValid) {\n  // ÉXITO: Devolvemos el resultado para el nodo de formateo final.\n  return [{ \n      json: {\n          objetivo_original: entradaOriginal.objetivo_original,\n          indicadoresGenerados: parsedJson,\n          error: null\n      }\n  }];\n}\n\n// Falla si la estructura de los objetos es incorrecta.\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        3248,
        1024
      ],
      "id": "2615684f-adea-4a7a-ae64-a654ad1df034",
      "name": "Validar y Extraer Indicadores"
    },
    {
      "parameters": {
        "jsCode": "const payload = $input.first().json.body;\nconst { estructuraMEI } = payload;\nconst items = [];\n\nlet objetivosADesglosar = [];\nlet contextoNivelSuperior = {};\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  objetivosADesglosar = payload.aprendizajesEsperados;\n  contextoNivelSuperior = { resultadosAprendizaje: payload.resultadosAprendizaje };\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  objetivosADesglosar = payload.resultadosAprendizaje;\n  contextoNivelSuperior = { resultadosFormativos: payload.resultadosFormativos };\n} else {\n  throw new Error(`Estructura MEI no soportada: ${estructuraMEI}`);\n}\n\nfor (const objetivo of objetivosADesglosar) {\n  items.push({\n    json: {\n      objetivo_actual: objetivo,\n      contexto_superior: contextoNivelSuperior,\n      estructuraMEI: estructuraMEI\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        304,
        1024
      ],
      "id": "8af13527-364b-4a8a-a708-2ce020ccde37",
      "name": "Desglosar Objetivos en Items"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        528,
        1024
      ],
      "id": "f5d10970-61cb-4e10-957f-66a7ab8e6722",
      "name": "Procesar Uno por Uno"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        816,
        720
      ],
      "id": "8460b90d-af4e-4330-85cb-d6fbce45e98d",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "const aggregatedResults = $input.first().json.data;\nconst originalPayload = $('Webhook').first().json.body;\nconst { estructuraMEI } = originalPayload;\n\nlet finalOutput = { estructuraMEI };\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  finalOutput.resultadosAprendizaje = originalPayload.resultadosAprendizaje;\n  finalOutput.analisisAprendizajesEsperados = [];\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  finalOutput.resultadosFormativos = originalPayload.resultadosFormativos;\n  finalOutput.analisisResultadosAprendizaje = [];\n}\n\n// Iteramos sobre los resultados agregados, que contienen los datos de cada loop.\nfor (const result of aggregatedResults) {\n  // Manejo de errores: Si un loop falló, su 'error' no será null.\n  if (result.error) {\n      if (!finalOutput.errors) finalOutput.errors = [];\n      finalOutput.errors.push({\n          objetivoFallido: result.objetivo_original, // objetivo_original SÍ está disponible aquí\n          detalleError: result.error\n      });\n      continue; // Salta al siguiente resultado\n  }\n\n  // --- CORRECCIÓN CLAVE ---\n  // Construimos el objeto final fusionando el 'objetivo_original' (que contiene id, texto, etc.)\n  // con la nueva propiedad 'indicadoresGenerados'.\n  const resultadoConIndicadores = {\n    ...result.objetivo_original, \n    indicadoresGenerados: result.indicadoresGenerados \n  };\n  // -------------------------\n\n  if (estructuraMEI === 'MEI-Antiguo') {\n    finalOutput.analisisAprendizajesEsperados.push(resultadoConIndicadores);\n  } else if (estructuraMEI === 'MEI-Actualizado') {\n    finalOutput.analisisResultadosAprendizaje.push(resultadoConIndicadores);\n  }\n}\n\nreturn finalOutput;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        720
      ],
      "id": "772a0a0b-d827-4142-b78e-4b020c9a0a5e",
      "name": "Formatear Salida Final"
    },
    {
      "parameters": {
        "jsCode": "// Este nodo SÓLO recibe la salida del RAG de Dominio.\nconst ragItems = $input.all();\n\nlet contexto = \"### REGLAS Y DEFINICIONES DEL GLOSARIO UNAB:\\n\";\n\nfor (const item of ragItems) {\n  // El input SÍ tiene la estructura item.json.document...\n  if (item.json.document && item.json.document.pageContent) {\n    contexto += `- ${item.json.document.pageContent}\\n`;\n  }\n}\n\n// Devuelve un único objeto con el texto consolidado.\n// El siguiente nodo (Constructor de Prompt) se encargará de fusionar esto\n// con los datos del loop.\nreturn [{\n    json: {\n        contexto_consolidado: contexto\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1104,
        1024
      ],
      "id": "83c8dbe7-5ae8-4c89-8f0d-d8f643d3ab34",
      "name": "Consolidar Contexto"
    },
    {
      "parameters": {
        "jsCode": "const itemData = $('Procesar Uno por Uno').first().json;\nconst { objetivo_actual } = itemData;\n\nconst promptBase = `Eres un experto en evaluación de competencias profesionales del modelo UNAB. Tu tarea es deconstruir una habilidad compleja en 2 o 3 procesos clave o hitos de desempeño observables.`;\n\nconst tareaTexto = `Para el siguiente objetivo, que describe una competencia profesional, identifica los 2 o 3 **procesos clave** que un profesional debe ejecutar para demostrar maestría. Para cada proceso, especifica el verbo de acción observable más importante.\n\n### FILOSOFÍA DE DECONSTRUCCIÓN:\nPiensa en las grandes fases o entregables del trabajo de un experto. No en un andamiaje para novatos.\n- **ENFOQUE:** Deconstrucción del proceso experto (ej. Analizar el problema -> Diseñar la solución -> Justificar el diseño).\n\n### REGLA DE VERBOS OBSERVABLES:\nEstán prohibidos los verbos de procesos internos: **conocer, comprender, analizar, reflexionar, valorar**. Usa alternativas que describan la evidencia de esos procesos.\n\n### OBJETIVO A DESGLOSAR:\n\"${objetivo_actual.texto}\"\n\n### FORMATO DE SALIDA OBLIGATORIO:\nTu respuesta DEBE SER ÚNICAMENTE un array JSON de objetos, donde cada objeto tiene dos claves: \"paso\" (la descripción del proceso) y \"verbo_principal\" (el verbo observable).\nEjemplo de salida:\n[\n  { \"paso\": \"Comparar el desempeño y necesidades de los estudiantes utilizando registros de aula\", \"verbo_principal\": \"Comparar\" },\n  { \"paso\": \"Elaborar una propuesta de unidad didáctica ajustada a la diversidad del grupo\", \"verbo_principal\": \"Elaborar\" },\n  { \"paso\": \"Argumentar la selección de estrategias en la unidad, demostrando su impacto\", \"verbo_principal\": \"Argumentar\" }\n]\n`;\n\nconst promptFinal = `${promptBase}\\n\\n${tareaTexto}`;\n\nreturn [{ json: { prompt: promptFinal, ...itemData } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1328,
        1024
      ],
      "id": "8b0ee2d1-a120-4e2d-bc2a-1cfb970a040a",
      "name": "Constructor de Prompt (Agente 1 - Estratega)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Constructor de Prompt (Agente 1 - Estratega)').first().json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1552,
        1024
      ],
      "id": "3332adbf-83dd-424b-b82f-9dc9f0b2aec5",
      "name": "Agente 1 - Estratega"
    },
    {
      "parameters": {
        "jsCode": "const llmOutput = $input.first().json.output;\n// Heredamos los datos originales del nodo anterior (Constructor del Agente 1)\nconst originalData = $('Constructor de Prompt (Agente 1 - Estratega)').first().json;\n\ntry {\n  const cleanedOutput = llmOutput.replace(/```json|```/g, '').trim();\n  const parsedJson = JSON.parse(cleanedOutput);\n\n  // --- CORRECCIÓN CLAVE ---\n  // Validamos que sea un array de objetos, y que cada objeto tenga las claves \"paso\" y \"verbo_principal\".\n  if (\n    Array.isArray(parsedJson) &&\n    parsedJson.length > 0 &&\n    parsedJson.every(item =>\n      typeof item === 'object' &&\n      item !== null &&\n      Object.prototype.hasOwnProperty.call(item, 'paso') &&\n      Object.prototype.hasOwnProperty.call(item, 'verbo_principal')\n    )\n  ) {\n    \n    // ÉXITO: Devolvemos un objeto que contiene los datos originales\n    // y la nueva progresión pedagógica validada.\n    return [{ \n      json: {\n        progresionPedagogica: parsedJson,\n        ...originalData // Re-inyectamos los datos del item actual del loop\n      }\n    }];\n  }\n  // -------------------------\n\n} catch (error) {\n  // Si JSON.parse falla, el catch se activa y la función continúa hasta el final.\n}\n\n// Si cualquier validación falla, o si hubo un error de parseo,\n// retornamos un array vacío para detener esta iteración del loop.\nreturn [];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1904,
        1024
      ],
      "id": "4eb8d761-f0a5-4cee-874c-ea45364b8808",
      "name": "Validar Salida del Estratega"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $input.first().json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2352,
        1024
      ],
      "id": "c51f017d-7c17-4adf-99ae-2548ef9aaa0c",
      "name": "Agente 2 - Redactor Bruto"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos la salida del Agente 2 (Redactor Bruto).\nconst draftOutput = $input.first().json.output;\n// Heredamos los datos originales del nodo anterior.\nconst originalData = $('Constructor de Prompt (Agente 2 - Redactor Bruto)').first().json;\nconst contextoGlosario = $('Consolidar Contexto').first().json.contexto_consolidado;\nconst { estructuraMEI, objetivo_actual } = originalData;\n\nlet promptBase = `Eres un auditor de calidad experto en la filosofía del modelo UNAB. Tu misión es la perfección absoluta. Tomas borradores y los transformas en indicadores impecables, justificando su calidad con la lógica precisa del modelo.`;\nlet tareaTexto = `Audita y reescribe los siguientes borradores de indicadores para que sean impecables. Luego, genera la justificación experta para cada uno.`;\nlet finalInstructions = \"\";\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  finalInstructions = `\n### FILOSOFÍA Y REGLAS (MANDATO ABSOLUTO):\n\n**1. PRINCIPIO FUNDAMENTAL: EL INDICADOR ES UNA EVIDENCIA OBSERVABLE Y MEDIBLE, NO UN PROPÓSITO.**\n   - Un indicador debe expresar un **desempeño observable en presente**. No debe describir una intención, un objetivo futuro, o expresar su finalidad.\n   - **CERO TOLERANCIA A LA FINALIDAD:** Por esta razón, está **TERMINANTEMENTE PROHIBIDO** usar la palabra \"para\", \"con el propósito de\", \"con el fin de\", en CUALQUIER parte del indicador. No hay excepciones.\n   - **TU MISIÓN:** Si encuentras una finalidad, debes reescribir la frase para que describa una **condición de ejecución** (\"utilizando...\", \"a partir de...\") o un **criterio de calidad observable** (\"demostrando coherencia...\", \"considerando la realidad...\").\n\n**2. PRINCIPIO DE ACCIÓN ÚNICA Y OBSERVABLE:**\n   - La 'habilidad' debe ser **UN ÚNICO verbo** en tercera persona plural. Debe ser una acción que se pueda ver o medir, no un proceso interno (prohibido: conocer, comprender, analizar, reflexionar).\n\n**3. PROCESO DE TRANSFORMACIÓN:**\n   - **Paso A (Auditoría):** Revisa cada borrador y reescríbelo en una frase perfecta que cumpla al 100% con los principios anteriores.\n   - **Paso B (Descomposición Mecánica):** Descompón la frase perfecta en 'habilidad', 'contenido' y 'condicion_contexto'.\n   - **Paso C (Justificación Experta):** Añade 'justificacionPedagogica' explicando la pertinencia del indicador al AE según y la correctitud de su estructura.\n\n**FORMATO DE SALIDA (JSON Únicamente):** Array de objetos con: \"habilidad\", \"contenido\", \"condicion_contexto\", \"justificacionPedagogica\".\n\n**EJEMPLO DE ORO (LA BIBLIA):**\n- **OBJETIVO:** \"Diseñar unidades didácticas...\"\n- **BORRADOR INACEPTABLE:** \"Seleccionan estrategias para potenciar el aprendizaje.\"\n- **TU SALIDA PERFECTA:**\n  {\n    \"habilidad\": \"Seleccionan\",\n    \"contenido\": \"estrategias pedagógicas inclusivas y principios de diversidad educativa\",\n    \"condicion_contexto\": \"considerando la realidad y características del grupo de estudiantes.\",\n    \"justificacionPedagogica\": \"La habilidad 'Seleccionan' es observable y de nivel analítico. El contenido es pertinente al objetivo. La condición ('considerando la realidad...') asegura que la acción sea aplicable a un escenario real, haciendo el indicador medible y progresivo.\"\n  }\n`;\n\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  finalInstructions = `\n### FILOSOFÍA Y REGLAS (MANDATO ABSOLUTO):\n\n**1. PRINCIPIO FUNDAMENTAL: EL INDICADOR ES UNA EVIDENCIA OBSERVABLE Y MEDIDA, NO UN PROPÓSITO EN SI MISMO.**\n   - Un indicador debe describir un **producto tangible** o un **proceso observable**. No debe describir una intención o finalidad.\n   - **CERO TOLERANCIA A LA FINALIDAD:** Por esta razón, está **TERMINANTEMENTE PROHIBIDO** usar la palabra \"para\" o sinónimos en CUALQUIER parte del indicador. No hay excepciones.\n   - **TU MISIÓN:** Si encuentras una finalidad, debes reescribir la frase para que la finalidad se convierta en parte del **proceso** o en una **condición de calidad** del producto, sin usar la palabra \"para\" o frases análogas que expresen una finalidad.\n\n**2. PRINCIPIO DE ACCIÓN ÚNICA Y OBSERVABLE:**\n   - El indicador debe comenzar con **UN ÚNICO verbo** en infinitivo, que sea observable (prohibido: conocer, comprender, analizar, reflexionar).\n\n**3. PROCESO DE TRANSFORMACIÓN:**\n   - **Paso A (Auditoría):** Revisa cada borrador y reescríbelo en una frase perfecta que cumpla al 100% con los principios anteriores.\n   - **Paso B (Justificación Experta):** Añade 'justificacionPedagogica' explicando la pertinencia del Indicador como mecanismo para evidenciar el progreso al Resultado Formativo.\n\n**FORMATO DE SALIDA (JSON Únicamente):** Array de objetos con: \"indicador\", \"justificacionPedagogica\".\n\n**EJEMPLO DE ORO (LA BIBLIA):**\n- **OBJETIVO:** \"Diseñar unidades didácticas...\"\n- **BORRADOR INACEPTABLE:** \"Elaborar unidades para promover el desarrollo.\"\n- **TU SALIDA PERFECTA:**\n  {\n    \"indicador\": \"Elaborar unidades didácticas que incluyan estrategias pedagógicas inclusivas y pertinentes, ajustadas a la diversidad del grupo de estudiantes.\",\n    \"justificacionPedagogica\": \"La estructura es correcta: 'Elaborar' (verbo) + 'unidades didácticas...' (producto) + 'ajustadas a la diversidad...' (condición de calidad). El indicador se enfoca en un producto tangible y observable, y actúa como un paso progresivo en el proceso de diseño.\"\n  }\n`;\n}\n\nconst datosEntrada = `### OBJETIVO PRINCIPAL DE REFERENCIA:\\n\"${objetivo_actual.texto}\"\n### BORRADOR DE INDICADORES A AUDITAR, CORREGIR Y JUSTIFICAR:\\n${draftOutput}`;\nconst promptFinal = `${promptBase}\\n${contextoGlosario}\\n### TAREA:\\n${tareaTexto}\\n${datosEntrada}\\n${finalInstructions}`;\n\nreturn { json: { prompt: promptFinal, objetivo_original: objetivo_actual, estructuraMEI: estructuraMEI } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2704,
        1024
      ],
      "id": "3f507d9c-b2d2-445e-ba15-44f0218c26eb",
      "name": "Constructor de Prompt (Agente 3 - Supervisor)"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Constructor de Prompt (Agente 3 - Supervisor)').first().json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        2912,
        1024
      ],
      "id": "015ac096-7490-4ed7-a96e-432d1cd5ba42",
      "name": "Agente 3 - Supervisor"
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos los datos del nodo validador del Agente 1.\nconst validatedData = $input.first().json;\nconst contextoGlosario = $('Consolidar Contexto').first().json.contexto_consolidado;\nconst { estructuraMEI, objetivo_actual, contexto_superior, progresionPedagogica } = validatedData;\n\nlet promptBase = `Eres un redactor de diseño instruccional. Tu función es tomar una estrategia y redactar un borrador de indicador como una frase completa que describa una **evidencia observable**.`;\nlet contextoTexto = \"\";\nlet tareaTexto = \"\";\nlet finalInstructions = \"\";\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  const ras = contexto_superior.resultadosAprendizaje.map(ra => `- ${ra.texto}`).join('\\\\n');\n  contextoTexto = `### OBJETIVOS DE NIVEL SUPERIOR (RA):\\n${ras}`;\n  tareaTexto = `Para cada paso, redacta un borrador de Indicador de Logro (IL) como una frase completa y coherente que describa qué es capaz de hacer el estudiante.`;\n\n  finalInstructions = `\n### INSTRUCCIONES DE REDACCIÓN (MEI ANTIGUO):\n1.  **ESTRUCTURA DE LA FRASE:** La frase debe describir una acción observable y debe poder leerse de corrido.\n2.  **HABILIDAD:** La frase debe comenzar con el 'verbo_principal' del paso, conjugado en **tercera persona plural del presente** (ej. \"Comparan\").\n3.  **FORMATO DE SALIDA:** Responde ÚNICAMENTE con un array JSON de strings, donde cada string es la frase completa del indicador.\n`;\n\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  const rfs = contexto_superior.resultadosFormativos.map(rf => `- ${rf.texto}`).join('\\\\n');\n  contextoTexto = `### OBJETIVO DE NIVEL SUPERIOR (RF):\\n${rfs}`;\n  tareaTexto = `Para cada paso, redacta un borrador de Indicador de Desempeño (ID) como una frase completa y coherente que describa qué genera el estudiante o qué proceso realiza.`;\n  \n  finalInstructions = `\n### INSTRUCCIONES DE REDACCIÓN (MEI ACTUALIZADO):\n1.  **ESTRUCTURA DE LA FRASE:** La frase debe describir un producto tangible o un proceso observable.\n2.  **VERBO:** La frase debe comenzar con el 'verbo_principal' del paso, en **infinitivo**.\n3.  **FORMATO DE SALIDA:** Responde ÚNICAMENTE con un array JSON de strings, donde cada string es la frase completa del indicador.\n`;\n}\n\nconst datosEntrada = `### OBJETIVO PRINCIPAL A DESGLOSAR:\\n\"${objetivo_actual.texto}\"\n### PROGRESIÓN PEDAGÓGICA A CONVERTIR:\\n${JSON.stringify(progresionPedagogica, null, 2)}`;\nconst promptFinal = `${promptBase}\\n${contextoTexto}\\n### CONTEXTO PEDAGÓGICO:\\n${contextoGlosario}\\n### TAREA:\\n${tareaTexto}\\n${datosEntrada}\\n${finalInstructions}`;\n\nreturn {\n    json: {\n        prompt: promptFinal,\n        objetivo_actual: objetivo_actual,\n        contexto_superior: contexto_superior,\n        estructuraMEI: estructuraMEI,\n    }\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2128,
        1024
      ],
      "id": "91f9da41-c700-495d-b3b9-bf1262bdfcf6",
      "name": "Constructor de Prompt (Agente 2 - Redactor Bruto)"
    }
  ],
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n:5678",
            "user-agent": "python-requests/2.32.5",
            "accept-encoding": "gzip, deflate",
            "accept": "*/*",
            "connection": "keep-alive",
            "content-length": "664",
            "content-type": "application/json"
          },
          "params": {},
          "query": {},
          "body": {
            "estructuraMEI": "MEI-Antiguo",
            "resultadosAprendizaje": [
              {
                "id": "RA-1",
                "texto": "Integrar conocimientos pedagógicos, estrategias inclusivas y teorías del aprendizaje para planificar y orientar experiencias educativas que promuevan el aprendizaje significativo y el desarrollo integral de los estudiantes en Educación Básica."
              }
            ],
            "aprendizajesEsperados": [
              {
                "id": "AE-1",
                "tributaA": [
                  "RA-1"
                ],
                "texto": "Diseñar unidades didácticas fundamentadas en estrategias pedagógicas inclusivas y teorías del aprendizaje, con el propósito de potenciar el aprendizaje significativo y el desarrollo integral de los estudiantes."
              }
            ]
          },
          "webhookUrl": "http://localhost:5678/webhook/0b0f8ddd-f0bb-476b-ac21-9e81f74f2c6c",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "RAG de Dominio": {
      "main": [
        [
          {
            "node": "Consolidar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "RAG de Dominio",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agente 1 - Estratega",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Agente 2 - Redactor Bruto",
            "type": "ai_languageModel",
            "index": 0
          },
          {
            "node": "Agente 3 - Supervisor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        [
          {
            "node": "Desglosar Objetivos en Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar y Extraer Indicadores": {
      "main": [
        [
          {
            "node": "Procesar Uno por Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Desglosar Objetivos en Items": {
      "main": [
        [
          {
            "node": "Procesar Uno por Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Uno por Uno": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RAG de Dominio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Formatear Salida Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatear Salida Final": {
      "main": [
        [
          {
            "node": "Respuesta Exitosa (200)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Contexto": {
      "main": [
        [
          {
            "node": "Constructor de Prompt (Agente 1 - Estratega)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Constructor de Prompt (Agente 1 - Estratega)": {
      "main": [
        [
          {
            "node": "Agente 1 - Estratega",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente 1 - Estratega": {
      "main": [
        [
          {
            "node": "Validar Salida del Estratega",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Salida del Estratega": {
      "main": [
        [
          {
            "node": "Constructor de Prompt (Agente 2 - Redactor Bruto)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente 2 - Redactor Bruto": {
      "main": [
        [
          {
            "node": "Constructor de Prompt (Agente 3 - Supervisor)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Constructor de Prompt (Agente 3 - Supervisor)": {
      "main": [
        [
          {
            "node": "Agente 3 - Supervisor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente 3 - Supervisor": {
      "main": [
        [
          {
            "node": "Validar y Extraer Indicadores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Constructor de Prompt (Agente 2 - Redactor Bruto)": {
      "main": [
        [
          {
            "node": "Agente 2 - Redactor Bruto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "991a46bb-50e3-43b9-a721-20cfc95ec673",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8991d57cc3be404c4c8d6951306c68fa6ee93d0a9fcfe54908cc27cc5546f205"
  },
  "id": "ChIBB6KiCNlHa36x",
  "tags": []
}