# .github/workflows/deploy.yml

name: Build and Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  # JOB 1: Detecta cambios, construye y sube solo lo necesario.
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      # Pasamos un booleano para saber si el despliegue es necesario.
      deploy_required: ${{ steps.detect-changes.outputs.deploy_required }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Detect Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            backend/**
            frontend/**
            n8n_custom/**
            n8n_workflows/**
            .github/workflows/deploy.yml

      - name: Determine if deployment is required
        id: detect-changes
        run: |
          if ${{ steps.changed-files.outputs.any_changed == 'true' }}; then
            echo "deploy_required=true" >> $GITHUB_OUTPUT
          else
            echo "deploy_required=false" >> $GITHUB_OUTPUT
          fi
          
      # --- ETAPA DE BUILD & PUSH SELECTIVA (si es necesario) ---
      
      - name: Configure AWS Credentials & Login to ECR
        if: steps.detect-changes.outputs.deploy_required == 'true'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        if: steps.detect-changes.outputs.deploy_required == 'true'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        if: steps.detect-changes.outputs.deploy_required == 'true'
        id: image_tag
        run: echo "tag=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Build, tag, and push images
        if: steps.detect-changes.outputs.deploy_required == 'true'
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG=${{ steps.image_tag.outputs.tag }}

          if [[ "${{ contains(steps.changed-files.outputs.all_changed_files, 'backend/') }}" == "true" ]]; then
            echo "Building backend..."
            docker build -t $ECR_REGISTRY/validador-qm-backend:$IMAGE_TAG -t $ECR_REGISTRY/validador-qm-backend:latest -f backend/Dockerfile .
            docker push $ECR_REGISTRY/validador-qm-backend --all-tags
          fi

          if [[ "${{ contains(steps.changed-files.outputs.all_changed_files, 'frontend/') }}" == "true" ]]; then
            echo "Building frontend..."
            docker build -t $ECR_REGISTRY/validador-qm-frontend:$IMAGE_TAG -t $ECR_REGISTRY/validador-qm-frontend:latest --build-arg VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} --build-arg VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} -f frontend/Dockerfile .
            docker push $ECR_REGISTRY/validador-qm-frontend --all-tags
          fi

          if [[ "${{ contains(steps.changed-files.outputs.all_changed_files, 'n8n_custom/') || contains(steps.changed-files.outputs.all_changed_files, 'n8n_workflows/') }}" == "true" ]]; then
            echo "Building n8n..."
            docker build -t $ECR_REGISTRY/validador-qm-n8n:$IMAGE_TAG -t $ECR_REGISTRY/validador-qm-n8n:latest -f n8n_custom/Dockerfile.prod .
            docker push $ECR_REGISTRY/validador-qm-n8n --all-tags
          fi

  # JOB 2: Despliega en EC2, solo si el JOB 1 lo requiere.
  deploy:
    needs: build-and-push
    if: needs.build-and-push.outputs.deploy_required == 'true'
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/validadorQM
            git pull origin main
            
            echo "${{ secrets.ENV_PROD_CONTENT }}" > .env.prod
            echo "${{ secrets.N8N_CREDENTIALS_JSON }}" | base64 --decode > n8n_credentials.json  
            
            # Usamos 'latest' porque el build siempre actualiza esta etiqueta.
            export IMAGE_TAG=latest
            export ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            docker compose -p validadorqm_prod -f docker-compose.prod.yml pull
            
            # El --env-file es crucial para que 'up' funcione.
            docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d
            
            docker image prune -f