# .github/workflows/deploy.yml

name: Build and Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  # JOB 1: Detecta cambios y construye/sube imágenes.
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.image_tag.outputs.tag }}
      # Pasamos la lista de archivos cambiados al siguiente job.
      changed_files: ${{ steps.changed-files.outputs.all_changed_files }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 

      - name: Detect Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            backend/**
            frontend/**
            n8n_custom/**
            n8n_workflows/**
            docker-compose.prod.yml
            .github/workflows/deploy.yml

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set Image Tag
        id: image_tag
        run: echo "tag=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT
        
      - name: Build and push Backend image
        if: contains(steps.changed-files.outputs.all_changed_files, 'backend/')
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-backend:${{ steps.image_tag.outputs.tag }} -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-backend:latest -f backend/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/validador-qm-backend --all-tags

      - name: Build and push Frontend image
        if: contains(steps.changed-files.outputs.all_changed_files, 'frontend/')
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-frontend:${{ steps.image_tag.outputs.tag }} -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-frontend:latest --build-arg VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} --build-arg VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} -f frontend/Dockerfile .
          docker push ${{ steps.login-ecr.outputs.registry }}/validador-qm-frontend --all-tags

      - name: Build and push n8n image
        if: contains(steps.changed-files.outputs.all_changed_files, 'n8n_custom/')
        run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-n8n:${{ steps.image_tag.outputs.tag }} -t ${{ steps.login-ecr.outputs.registry }}/validador-qm-n8n:latest -f n8n_custom/Dockerfile.prod .
          docker push ${{ steps.login-ecr.outputs.registry }}/validador-qm-n8n --all-tags

  # JOB 2: Despliega en EC2.
  deploy:
    needs: build-and-push
    # ¡CAMBIO CLAVE! Se ejecuta siempre que haya CUALQUIER cambio en los archivos monitoreados.
    if: needs.build-and-push.outputs.changed_files != ''
    runs-on: ubuntu-latest
    
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
          
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/validadorQM
            git pull origin main
            
            echo "${{ secrets.ENV_PROD_CONTENT }}" > .env.prod
            echo "${{ secrets.N8N_CREDENTIALS_JSON }}" | base64 --decode > n8n_credentials.json  
                      
            export IMAGE_TAG=latest
            export ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            docker compose -p validadorqm_prod -f docker-compose.prod.yml pull
            
            # --- LÓGICA DE REINICIO INTELIGENTE ---
            CHANGED_FILES="${{ needs.build-and-push.outputs.changed_files }}"

            # Si el docker-compose.prod.yml o el deploy.yml cambiaron, forzamos recreación total.
            if echo "$CHANGED_FILES" | grep -q "docker-compose.prod.yml" || echo "$CHANGED_FILES" | grep -q ".github/workflows/deploy.yml"; then
              echo "Infrastructure file changed. Forcing recreation of all services..."
              docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d --force-recreate
            # Si solo los workflows cambiaron, forzamos recreación solo de n8n.
            elif echo "$CHANGED_FILES" | grep -q "n8n_workflows/"; then
              echo "Workflow files changed. Forcing n8n container recreation..."
              # Primero aseguramos que los otros servicios estén corriendo
              docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d
              # Luego forzamos la recreación solo de n8n
              docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d --force-recreate n8n
            else
              # Para cambios simples (backend, frontend, n8n_custom), dejamos que 'up -d' sea inteligente.
              docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d
            fi
            
            docker image prune -f