# .github/workflows/deploy.yml

name: Deploy App (Frontend, Backend, n8n Core) to AWS EC2

on:
  push:
    branches: [ "main" ]

jobs:
  # JOB 1: Detecta si ha cambiado el código de la aplicación (ignorando workflows).
  detect-app-changes:
    runs-on: ubuntu-latest
    outputs:
      app_changed: ${{ steps.changed-files.outputs.any_changed }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Find changed application files
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          # ¡CAMBIO CLAVE! Monitoreamos solo las carpetas que requieren un build de imagen.
          # La carpeta 'n8n_workflows' ha sido eliminada de esta lista.
          files: |
            backend/**
            frontend/**
            n8n_custom/**

  # JOB 2: Construye y sube las imágenes, solo si ha cambiado el código de la app.
  build-and-push-app:
    needs: detect-app-changes
    if: needs.detect-app-changes.outputs.app_changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS Credentials & Login
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build, tag, and push images
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          
          # Construimos y subimos las 3 imágenes con el tag 'latest'.
          # El caché de Docker en el runner hará que esto sea rápido si no hay cambios reales.
          docker build -t $ECR_REGISTRY/validador-qm-backend:latest -f backend/Dockerfile .
          docker push $ECR_REGISTRY/validador-qm-backend:latest

          docker build -t $ECR_REGISTRY/validador-qm-frontend:latest --build-arg VITE_SUPABASE_URL=${{ secrets.VITE_SUPABASE_URL }} --build-arg VITE_SUPABASE_ANON_KEY=${{ secrets.VITE_SUPABASE_ANON_KEY }} -f frontend/Dockerfile .
          docker push $ECR_REGISTRY/validador-qm-frontend:latest

          docker build -t $ECR_REGISTRY/validador-qm-n8n:latest -f n8n_custom/Dockerfile.prod .
          docker push $ECR_REGISTRY/validador-qm-n8n:latest

  # JOB 3: Despliega los contenedores en EC2, solo si se construyeron nuevas imágenes.
  deploy-app-containers:
    needs: build-and-push-app
    # Este job solo se ejecuta si el anterior (build) se completó con éxito.
    # Como el job de build solo se ejecuta si hay cambios, este job también es condicional.
    if: needs.build-and-push-app.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            cd ~/validadorQM
            git pull origin main
            
            # Siempre actualizamos el .env por si hay cambios de configuración
            echo "${{ secrets.ENV_PROD_CONTENT }}" > .env.prod
            
            export IMAGE_TAG=latest
            export ECR_REGISTRY=${{ secrets.AWS_ECR_REGISTRY }}
          
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            
            # Descargamos las imágenes que han sido actualizadas
            docker compose -p validadorqm_prod -f docker-compose.prod.yml pull
            
            # 'up -d' reiniciará ÚNICAMENTE los contenedores cuyas imágenes
            # han sido actualizadas por el comando 'pull'.
            # Si solo cambió el frontend, solo el frontend se reiniciará.
            docker compose -p validadorqm_prod -f docker-compose.prod.yml --env-file .env.prod up -d
            
            docker image prune -f