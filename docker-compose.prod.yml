# docker-compose.prod.yml (VERSIÓN FINAL PARA CI/CD Y DESPLIEGUE EN AWS)

# Esta versión está diseñada para ser usada por el pipeline de CI/CD.
# No construye las imágenes en el servidor, sino que las descarga desde un
# registro de contenedores (ECR) donde el pipeline las ha subido previamente.

services:
  #--- SERVICIO DE BACKEND (FLASK) ---
  backend:
    # La directiva 'build' se reemplaza por 'image'.
    # Las variables ${ECR_REGISTRY} y ${IMAGE_TAG} serán exportadas
    # en el servidor EC2 por el script del pipeline de GitHub Actions.
    image: ${ECR_REGISTRY}/validador-qm-backend:${IMAGE_TAG}
    container_name: validador_qm_backend_prod
    env_file:
      - .env.prod
    ports:
      - "5000:5000"
    restart: always
    networks:
      - validador-net-prod
    depends_on:
      - n8n
      - postgres

  #--- SERVICIO DE FRONTEND (VUE) ---
  frontend:
    # Reemplazamos 'build' por la imagen pre-construida de ECR.
    image: ${ECR_REGISTRY}/validador-qm-frontend:${IMAGE_TAG}
    container_name: validador_qm_frontend_prod
    ports:
      - "8080:8080" # Mantenemos el puerto 8080 para consistencia, el Reverse Proxy de AWS lo redirigirá.
    restart: always
    networks:
      - validador-net-prod
    depends_on:
      - backend

  #--- SERVICIO DE ORQUESTACIÓN (N8N) ---
  n8n:
    # Reemplazamos el bloque 'build' completo por la imagen de ECR.
    image: ${ECR_REGISTRY}/validador-qm-n8n:${IMAGE_TAG}
    container_name: validador_qm_n8n_prod
    env_file:
      - .env.prod
    restart: always
    ports:
      - "5678:5678"
    environment:
      # Todas las configuraciones de runtime se mantienen.
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
    volumes:
      - n8n_data_prod:/home/node/.n8n
      - ./n8n_workflows:/home/node/workflows:ro
    secrets:
      - n8n_credentials
    networks:
      - validador-net-prod
    depends_on:
      - postgres

  #--- SERVICIO DE BASE DE DATOS (POSTGRESQL) ---
  postgres:
    # Este servicio no cambia, ya que siempre usa una imagen pública de Docker Hub.
    image: postgres:13
    container_name: validador_qm_postgres_prod
    env_file:
      - .env.prod
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - validador-net-prod

networks:
  validador-net-prod:
    driver: bridge

volumes:
  n8n_data_prod:
  postgres_data_prod:

secrets:
  n8n_credentials:
    file: ./n8n_credentials.json