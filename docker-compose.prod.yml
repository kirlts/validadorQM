# docker-compose.prod.yml (VERSIÓN FINAL PARA DESPLIEGUE CON API-DRIVEN CI/CD)

# Esta versión asume que el pipeline de CI/CD es el "cerebro".
# Las imágenes se descargan de ECR. La configuración de n8n es mínima,
# ya que las actualizaciones de workflows se gestionan externamente a través de la API REST.

services:
  #--- SERVICIO DE PROXY Y FRONTEND (NGINX + VUE) ---
  frontend:
    image: ${ECR_REGISTRY}/validador-qm-frontend:${IMAGE_TAG}
    container_name: validador_qm_frontend_prod
    restart: always
    ports:
      # Único punto de entrada público.
      - "80:8080"
    networks:
      - validador-net-prod
    depends_on:
      - backend
      - n8n

  #--- SERVICIO DE BACKEND (FLASK) ---
  backend:
    image: ${ECR_REGISTRY}/validador-qm-backend:${IMAGE_TAG}
    container_name: validador_qm_backend_prod
    restart: always
    env_file:
      - .env.prod
    networks:
      - validador-net-prod
    depends_on:
      - n8n
      - postgres

  #--- SERVICIO DE ORQUESTACIÓN (N8N) ---
  n8n:
    image: ${ECR_REGISTRY}/validador-qm-n8n:${IMAGE_TAG}
    container_name: validador_qm_n8n_prod
    restart: always
    env_file:
      - .env.prod
    environment:
      # --- VARIABLES ESENCIALES PARA EL SERVIDOR N8N ---
      # No se necesitan variables de 'OWNER' ya que el setup inicial es manual
      # y los despliegues posteriores usan la base de datos existente.
      
      # Configuración de la base de datos (obligatoria)
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_DATABASE: ${POSTGRES_DB}
      DB_POSTGRESDB_USER: ${POSTGRES_USER}
      DB_POSTGRESDB_PASSWORD: ${POSTGRES_PASSWORD}
      
      # Clave de cifrado y configuración de proxy (obligatorias para producción)
      N8N_ENCRYPTION_KEY: ${N8N_ENCRYPTION_KEY}
      GENERIC_TIMEZONE: ${GENERIC_TIMEZONE}
      N8N_PROXY_MODE: ${N8N_PROXY_MODE}
      WEBHOOK_URL: ${WEBHOOK_URL}
      N8N_PATH: ${N8N_PATH}
      
    volumes:
      # Persiste la configuración interna de n8n, logs, etc.
      - n8n_data_prod:/home/node/.n8n
      # YA NO SE MONTA LA CARPETA DE WORKFLOWS. La base de datos es ahora
      # la única fuente de verdad para los workflows en ejecución. Git y el pipeline
      # son la fuente de verdad para las ACTUALIZACIONES vía API.
      
    # YA NO SE NECESITAN SECRETS. Las credenciales se gestionan manualmente en la UI
    # de producción, siguiendo las mejores prácticas de seguridad.
    
    networks:
      - validador-net-prod
    depends_on:
      - postgres

  #--- SERVICIO DE BASE DE DATOS (POSTGRESQL) ---
  postgres:
    image: postgres:13
    container_name: validador_qm_postgres_prod
    restart: always
    env_file:
      - .env.prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      # Este volumen es el corazón del sistema. Persiste todo el estado.
      - postgres_data_prod:/var/lib/postgresql/data
    networks:
      - validador-net-prod

networks:
  validador-net-prod:
    driver: bridge

volumes:
  n8n_data_prod:
  postgres_data_prod: