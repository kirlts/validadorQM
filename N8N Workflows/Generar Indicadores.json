{
  "name": "Generar Indicadores",
  "nodes": [
    {
      "parameters": {
        "mode": "load",
        "tableName": {
          "__rl": true,
          "value": "glosario_chunks",
          "mode": "list",
          "cachedResultName": "glosario_chunks"
        },
        "prompt": "={{ `${$json.objetivo_actual.texto || ''} ${$json.objetivo_actual.contenido || ''} ${$json.objetivo_actual.metodologia || ''}` }}",
        "topK": 100,
        "options": {
          "queryName": "match_glosario_chunks"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.vectorStoreSupabase",
      "typeVersion": 1.3,
      "position": [
        880,
        1232
      ],
      "id": "c479768a-ccb9-4322-9b3f-9c177794df10",
      "name": "RAG de Dominio",
      "credentials": {
        "supabaseApi": {
          "id": "m0DUcQthM94wIR7O",
          "name": "Supabase account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Constructor de Prompt Dinámico').first().json.prompt }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        1680,
        1232
      ],
      "id": "3332adbf-83dd-424b-b82f-9dc9f0b2aec5",
      "name": "Agente Generador"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.embeddingsGoogleGemini",
      "typeVersion": 1,
      "position": [
        880,
        1408
      ],
      "id": "f1a56211-8269-40e9-9835-8e39b151901f",
      "name": "Embeddings Google Gemini",
      "credentials": {
        "googlePalmApi": {
          "id": "1fRbxclakan4SB2c",
          "name": "Api 1"
        }
      }
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-lite",
        "options": {
          "temperature": 0.4
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        1760,
        1456
      ],
      "id": "5367768d-96e8-4c35-8d2c-350a9f17f62e",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "1fRbxclakan4SB2c",
          "name": "Api 1"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtenemos los datos de la iteración actual referenciando el nodo Split In Batches. ESTA ES LA LÓGICA CORRECTA.\nconst itemData = $('Procesar Uno por Uno').first().json;\n\n// Obtenemos el contexto del nodo inmediatamente anterior (Consolidar Contexto) usando $input.\nconst contextoGlosario = $input.first().json.contexto_consolidado;\n\n// Ahora la desestructuración funcionará porque 'itemData' tiene los datos correctos.\nconst { estructuraMEI, objetivo_actual, contexto_superior } = itemData;\n\nlet promptBase = `Eres un experto diseñador instruccional de la UNAB. Tu rol es seguir las reglas pedagógicas de forma estricta y precisa, y justificar tus decisiones con claridad.`;\nlet contextoTexto = \"\";\nlet tareaTexto = \"\";\nlet tipoIndicador = \"\";\n\n// La lógica de protección dentro de los if/else sigue siendo una buena práctica.\nif (estructuraMEI === 'MEI-Antiguo') {\n  tipoIndicador = \"Indicadores de Logro (IL)\";\n  const ras = contexto_superior.resultadosAprendizaje.map(ra => `- ${ra.texto}`).join('\\\\n');\n  contextoTexto = `### OBJETIVOS DE NIVEL SUPERIOR (Resultados de Aprendizaje):\\n${ras}`;\n  tareaTexto = `Genera una lista de 2 a 4 ${tipoIndicador} que desglosen operativamente el siguiente Aprendizaje Esperado (AE).`;\n\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  tipoIndicador = \"Indicadores de Desempeño (ID)\";\n  const rfs = contexto_superior.resultadosFormativos.map(rf => `- ${rf.texto}`).join('\\\\n');\n  // --- LÍNEA CORREGIDA ---\n  // Se reemplaza la variable incorrecta 'rf_text' por la variable procesada 'rfs'.\n  contextoTexto = `### OBJETIVO DE NIVEL SUPERIOR (Resultado Formativo):\\n${rfs}`;\n  // -----------------------\n  tareaTexto = `Genera una lista de 3 a 5 ${tipoIndicador} que desglosen operativamente el siguiente Resultado de Aprendizaje (RA).`;\n}\n\nlet datosEntrada = `### ${estructuraMEI === 'MEI-Antiguo' ? 'APRENDIZAJE ESPERADO' : 'RESULTADO DE APRENDIZAJE'} A DESGLOSAR:\\n\"${objetivo_actual.texto}\"`;\nif (objetivo_actual.contenido) {\n  datosEntrada += `\\n\\n### CONTENIDO ASOCIADO:\\n${objetivo_actual.contenido}`;\n}\nif (objetivo_actual.metodologia) {\n  datosEntrada += `\\n\\n### METODOLOGÍA PROPUESTA:\\n${objetivo_actual.metodologia}`;\n}\n\nconst finalInstructions = `\n### INSTRUCCIONES DE GENERACIÓN Y FORMATO (MUY IMPORTANTE):\nTu tarea es generar un array JSON de objetos. Sigue estas reglas de forma estricta:\n\n1.  **REGLA TAXONÓMICA INFLEXIBLE:** El verbo del indicador que generes DEBE ser de un nivel taxonómico **IGUAL O INFERIOR** al del verbo del objetivo a desglosar. **NUNCA SUPERIOR.**\n\n2.  **REGLA DE SINTAXIS:** El indicador describe una **evidencia observable**, no un propósito. Por lo tanto, NO DEBE usar la palabra \"para\" para expresar finalidad.\n\n3.  **FORMATO DE SALIDA:** Tu respuesta DEBE SER ÚNICAMENTE un array JSON de objetos. Para cada objeto, rellena los siguientes campos:\n    *   **indicador**: El texto completo del indicador.\n    *   **verbo**: El verbo principal en infinitivo.\n    *   **justificacionSemantica**: Explica por qué el indicador es una evidencia relevante del objetivo.\n    *   **justificacionTaxonomica**: En una sola frase, identifica el verbo y nivel del objetivo, el verbo y nivel del indicador, declara la relación ('inferior' o 'igual'), y explica brevemente por qué es coherente.\n    *   **justificacionSintactica**: Explica por qué la sintaxis del indicador es correcta, enfocándose en cómo describe una **evidencia observable** que **contribuye a la finalidad ya expresada en el objetivo padre**, en lugar de definir una nueva finalidad.\n\n### EJEMPLOS DE APLICACIÓN DE LAS REGLAS DE JUSTIFICACIÓN:\n\n**EJEMPLO 1:**\n- **Objetivo a desglosar:** \"Analizar el desempeño del proyecto...\" (Finalidad: analizar desempeño)\n- **Salida del indicador:**\n  {\n    \"indicador\": \"Calcular los índices de desempeño (CPI y SPI) para determinar la salud del proyecto.\",\n    \"verbo\": \"Calcular\",\n    \"justificacionSemantica\": \"El indicador desglosa la tarea de 'analizar el desempeño' en la acción medible de calcular los índices CPI y SPI, que son métricas fundamentales para dicho análisis.\",\n    \"justificacionTaxonomica\": \"El verbo del objetivo es 'Analizar' (Nivel 4) y el del indicador es 'Calcular' (Nivel 3), siendo la relación 'inferior', lo cual es coherente ya que el cálculo es un prerrequisito para el análisis.\",\n    \"justificacionSintactica\": \"La sintaxis es correcta porque describe la evidencia observable (el cálculo de los índices) que permite cumplir la finalidad de 'analizar el desempeño' ya definida en el objetivo, sin introducir un nuevo propósito.\"\n  }\n\n**EJEMPLO 2 (INCORRECTO Y PROHIBIDO - VIOLACIÓN TAXONÓMICA):**\n- **Objetivo a desglosar:** \"Implementar una campaña de email marketing...\" (Verbo 'Implementar', Nivel 3)\n- **Salida inválida (verbo superior):**\n  {\n    \"indicador\": \"Diseñar el flujo de automatización de la campaña...\",\n    \"verbo\": \"Diseñar\" // Verbo 'Diseñar' (Nivel 6) es SUPERIOR a 'Implementar' (Nivel 3). ESTO ESTÁ PROHIBIDO.\n  }\n`;\n\nconst promptFinal = `\n${promptBase}\n\n### CONTEXTO PEDAGÓGICO (REGLAS OBLIGATORIAS):\n${contextoGlosario}\n\n${contextoTexto}\n\n### TAREA ESPECÍFICA:\n${tareaTexto}\n\n${datosEntrada}\n\n${finalInstructions}\n`;\n\nreturn { json: { prompt: promptFinal, objetivo_original: objetivo_actual } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1456,
        1232
      ],
      "id": "6d1dd585-7e33-4f18-b6a4-ef782a125ff3",
      "name": "Constructor de Prompt Dinámico"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "0b0f8ddd-f0bb-476b-ac21-9e81f74f2c6c",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -128,
        1024
      ],
      "id": "a051ebfe-8956-4ec4-8fc8-f1ea3a75465f",
      "name": "Webhook",
      "webhookId": "0b0f8ddd-f0bb-476b-ac21-9e81f74f2c6c"
    },
    {
      "parameters": {
        "jsCode": "// --- CONFIGURACIÓN DE LA PRUEBA ---\n// Cambia este valor para probar los diferentes escenarios.\n// Opciones disponibles:\n// 1. 'MEI-Actualizado-Simple'   (Un solo RA)\n// 2. 'MEI-Actualizado-Complejo'  (Múltiples RAs, con contenido/metodología)\n// 3. 'MEI-Antiguo-Simple'       (Un solo AE)\n// 4. 'MEI-Antiguo-Complejo'     (Múltiples AEs)\nconst testCase = 'MEI-Antiguo-Complejo';\n// ---------------------------------\n\nlet payload = {};\n\nswitch (testCase) {\n    case 'MEI-Actualizado-Simple':\n        payload = {\n            \"estructuraMEI\": \"MEI-Actualizado\",\n            \"resultadosFormativos\": [\n                { \"id\": \"RF-1\", \"texto\": \"Diseñar soluciones de software escalables y seguras aplicando principios de ingeniería y estándares de la industria.\" }\n            ],\n            \"resultadosAprendizaje\": [\n                {\n                    \"id\": \"RA-1-Simple\",\n                    \"tributaA\": [\"RF-1\"],\n                    \"texto\": \"Aplicar patrones de diseño creacionales para la construcción de objetos en un sistema de gestión de transacciones bancarias.\"\n                }\n            ]\n        };\n        break;\n\n    case 'MEI-Actualizado-Complejo':\n        payload = {\n            \"estructuraMEI\": \"MEI-Actualizado\",\n            \"resultadosFormativos\": [\n                { \"id\": \"RF-1\", \"texto\": \"Diseñar sistemas de software robustos y escalables aplicando patrones de arquitectura para satisfacer requisitos complejos.\" },\n                { \"id\": \"RF-2\", \"texto\": \"Comunicar soluciones técnicas de manera efectiva a audiencias diversas.\" }\n            ],\n            \"resultadosAprendizaje\": [\n                {\n                    \"id\": \"RA-1-Complejo\",\n                    \"tributaA\": [\"RF-1\"],\n                    \"texto\": \"Implementar un sistema de microservicios que se comunican de forma asíncrona utilizando un bus de mensajes.\",\n                    \"contenido\": \"Patrón de arquitectura de microservicios, Docker, RabbitMQ (Message Broker), consistencia eventual.\",\n                    \"metodologia\": \"Aprendizaje Basado en Problemas (ABP).\"\n                },\n                {\n                    \"id\": \"RA-2-Complejo\",\n                    \"tributaA\": [\"RF-1\", \"RF-2\"],\n                    \"texto\": \"Argumentar las decisiones de diseño arquitectónico tomadas, justificando la elección de patrones frente a alternativas.\",\n                    \"contenido\": \"Documentos de Decisión de Arquitectura (ADR), diagramas C4 Model, comparación de patrones.\",\n                    \"metodologia\": \"Análisis de Caso y Debate.\"\n                }\n            ]\n        };\n        break;\n\n    case 'MEI-Antiguo-Simple':\n        payload = {\n            \"estructuraMEI\": \"MEI-Antiguo\",\n            \"resultadosAprendizaje\": [\n                { \"id\": \"RA-1\", \"texto\": \"Analizar los principios fundamentales del marketing digital.\" }\n            ],\n            \"aprendizajesEsperados\": [\n                {\n                    \"id\": \"AE-1-Simple\",\n                    \"tributaA\": [\"RA-1\"],\n                    \"texto\": \"Diferenciar las métricas clave (KPIs) utilizadas en campañas de redes sociales para evaluar su efectividad.\"\n                }\n            ]\n        };\n        break;\n\n    case 'MEI-Antiguo-Complejo':\n        payload = {\n            \"estructuraMEI\": \"MEI-Antiguo\",\n            \"resultadosAprendizaje\": [\n                { \"id\": \"RA-1\", \"texto\": \"Diseñar planes de proyecto integrales, aplicando metodologías ágiles y predictivas.\" },\n                { \"id\": \"RA-2\", \"texto\": \"Gestionar la ejecución y el control de proyectos, evaluando el desempeño.\" }\n            ],\n            \"aprendizajesEsperados\": [\n                {\n                    \"id\": \"AE-1-Complejo\",\n                    \"tributaA\": [\"RA-1\"],\n                    \"texto\": \"Elaborar la Estructura de Desglose del Trabajo (EDT) de un proyecto para definir el alcance total del mismo.\"\n                },\n                {\n                    \"id\": \"AE-2-Complejo\",\n                    \"tributaA\": [\"RA-2\"],\n                    \"texto\": \"Analizar el desempeño del proyecto utilizando métricas de la Gestión del Valor Ganado (EVM) para evaluar desviaciones.\"\n                }\n            ]\n        };\n        break;\n\n    default:\n        payload = { \"error\": \"testCase no válido\" };\n}\n\nreturn { json: { body: payload } };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        96,
        1216
      ],
      "id": "87e7aa89-1f9c-4b06-bf3e-8bbe21db8649",
      "name": "Set Test Payload"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "53604407-1ab7-4309-a4de-342a9ab14a84",
              "leftValue": "={{ $json.estructuraMEI }}",
              "rightValue": "=true",
              "operator": {
                "type": "string",
                "operation": "exists",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1456,
        816
      ],
      "id": "1cdf1ea1-ac35-43a1-85a2-4151133e92b2",
      "name": "Json Valido?"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $('Validar y Extraer Indicadores').first().json }}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1744,
        720
      ],
      "id": "e317bab9-00c6-4eb8-8bb3-3380649b39de",
      "name": "Respuesta Exitosa (200)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"error\": \"Error al generar o validar los indicadores.\",\n  \"details\": \"El modelo de lenguaje no devolvió un array JSON válido.\",\n  \"raw_output\": \"{{ $('Agente Generador').first().json.output }}\"\n}",
        "options": {
          "responseCode": 500
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        1744,
        912
      ],
      "id": "d7779147-ceac-40cc-b005-8576dc6a4654",
      "name": "Respuesta de Error (500)"
    },
    {
      "parameters": {
        "jsCode": "const llmOutput = $('Agente Generador').first().json.output;\nconst entradaOriginal = $('Constructor de Prompt Dinámico').first().json;\n\n// Define la estructura que CADA objeto en el array debe tener.\nconst requiredKeys = [\n    'indicador', \n    'verbo', \n    'justificacionSemantica', \n    'justificacionTaxonomica', \n    'justificacionSintactica'\n];\n\n// Paso 1: Intentar limpiar y parsear el JSON.\n// Usamos un parseo seguro que no detiene el flujo si falla.\nlet parsedJson;\nconst cleanedOutput = llmOutput.replace(/```json|```/g, '').trim();\ntry {\n  parsedJson = JSON.parse(cleanedOutput);\n} catch (e) {\n  parsedJson = null; // Si falla, asignamos null y dejamos que las validaciones siguientes fallen.\n}\n\n\n// Paso 2: Ejecutar una cadena de validaciones.\n// Si alguna falla, la función retorna un array vacío de inmediato.\n\n// 2.1 ¿El parseo fue exitoso y el resultado es un array?\nif (!parsedJson || !Array.isArray(parsedJson)) {\n    return []; \n}\n\n// 2.2 ¿El array tiene al menos un elemento?\nif (parsedJson.length === 0) {\n    return [];\n}\n\n// 2.3 ¿Cada elemento del array es un objeto con TODAS las claves requeridas?\nconst isStructureValid = parsedJson.every(item => \n    typeof item === 'object' && \n    item !== null && \n    requiredKeys.every(key => Object.prototype.hasOwnProperty.call(item, key))\n);\n\nif (!isStructureValid) {\n    return [];\n}\n\n// Si TODAS las validaciones pasaron, significa que la salida es válida.\n// Devolvemos el resultado exitoso.\nreturn [{ \n    json: {\n        ...entradaOriginal,\n        indicadoresGenerados: parsedJson,\n        error: null\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2032,
        1360
      ],
      "id": "2615684f-adea-4a7a-ae64-a654ad1df034",
      "name": "Validar y Extraer Indicadores"
    },
    {
      "parameters": {
        "jsCode": "const payload = $input.first().json.body;\nconst { estructuraMEI } = payload;\nconst items = [];\n\nlet objetivosADesglosar = [];\nlet contextoNivelSuperior = {};\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  objetivosADesglosar = payload.aprendizajesEsperados;\n  contextoNivelSuperior = { resultadosAprendizaje: payload.resultadosAprendizaje };\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  objetivosADesglosar = payload.resultadosAprendizaje;\n  contextoNivelSuperior = { resultadosFormativos: payload.resultadosFormativos };\n} else {\n  throw new Error(`Estructura MEI no soportada: ${estructuraMEI}`);\n}\n\nfor (const objetivo of objetivosADesglosar) {\n  items.push({\n    json: {\n      objetivo_actual: objetivo,\n      contexto_superior: contextoNivelSuperior,\n      estructuraMEI: estructuraMEI\n    }\n  });\n}\n\nreturn items;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        1216
      ],
      "id": "8af13527-364b-4a8a-a708-2ce020ccde37",
      "name": "Desglosar Objetivos en Items"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        656,
        1216
      ],
      "id": "f5d10970-61cb-4e10-957f-66a7ab8e6722",
      "name": "Procesar Uno por Uno"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        944,
        816
      ],
      "id": "8460b90d-af4e-4330-85cb-d6fbce45e98d",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "jsCode": "const aggregatedResults = $input.first().json.data;\nconst originalPayload = $('Set Test Payload').first().json.body;\nconst { estructuraMEI } = originalPayload;\n\nlet finalOutput = { estructuraMEI };\n\nif (estructuraMEI === 'MEI-Antiguo') {\n  finalOutput.resultadosAprendizaje = originalPayload.resultadosAprendizaje;\n  finalOutput.analisisAprendizajesEsperados = [];\n} else if (estructuraMEI === 'MEI-Actualizado') {\n  finalOutput.resultadosFormativos = originalPayload.resultadosFormativos;\n  finalOutput.analisisResultadosAprendizaje = [];\n}\n\nfor (const result of aggregatedResults) {\n  // Manejo de errores del loop\n  if (result.error) {\n      if (!finalOutput.errors) finalOutput.errors = [];\n      finalOutput.errors.push({\n          objetivoFallido: result.objetivo_original,\n          detalleError: result.error\n      });\n      continue; // Salta al siguiente resultado si este falló\n  }\n\n  const resultadoConIndicadores = {\n    ...result.objetivo_original,\n    // Aquí usamos la nueva clave consistente del Validador\n    indicadoresGenerados: result.indicadoresGenerados \n  };\n\n  if (estructuraMEI === 'MEI-Antiguo') {\n    finalOutput.analisisAprendizajesEsperados.push(resultadoConIndicadores);\n  } else if (estructuraMEI === 'MEI-Actualizado') {\n    finalOutput.analisisResultadosAprendizaje.push(resultadoConIndicadores);\n  }\n}\n\nreturn finalOutput;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        816
      ],
      "id": "772a0a0b-d827-4142-b78e-4b020c9a0a5e",
      "name": "Formatear Salida Final"
    },
    {
      "parameters": {
        "jsCode": "// Este nodo SÓLO recibe la salida del RAG de Dominio.\nconst ragItems = $input.all();\n\nlet contexto = \"### REGLAS Y DEFINICIONES DEL GLOSARIO UNAB:\\n\";\n\nfor (const item of ragItems) {\n  // El input SÍ tiene la estructura item.json.document...\n  if (item.json.document && item.json.document.pageContent) {\n    contexto += `- ${item.json.document.pageContent}\\n`;\n  }\n}\n\n// Devuelve un único objeto con el texto consolidado.\n// El siguiente nodo (Constructor de Prompt) se encargará de fusionar esto\n// con los datos del loop.\nreturn [{\n    json: {\n        contexto_consolidado: contexto\n    }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1232,
        1232
      ],
      "id": "83c8dbe7-5ae8-4c89-8f0d-d8f643d3ab34",
      "name": "Consolidar Contexto"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -128,
        1216
      ],
      "id": "8a85cd41-3e0a-4860-8e0f-bdd6e88124b6",
      "name": "When clicking ‘Execute workflow’"
    }
  ],
  "pinData": {},
  "connections": {
    "RAG de Dominio": {
      "main": [
        [
          {
            "node": "Consolidar Contexto",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Agente Generador": {
      "main": [
        [
          {
            "node": "Validar y Extraer Indicadores",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Embeddings Google Gemini": {
      "ai_embedding": [
        [
          {
            "node": "RAG de Dominio",
            "type": "ai_embedding",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agente Generador",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Constructor de Prompt Dinámico": {
      "main": [
        [
          {
            "node": "Agente Generador",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook": {
      "main": [
        []
      ]
    },
    "Set Test Payload": {
      "main": [
        [
          {
            "node": "Desglosar Objetivos en Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Json Valido?": {
      "main": [
        [
          {
            "node": "Respuesta Exitosa (200)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respuesta de Error (500)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar y Extraer Indicadores": {
      "main": [
        [
          {
            "node": "Procesar Uno por Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Desglosar Objetivos en Items": {
      "main": [
        [
          {
            "node": "Procesar Uno por Uno",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Procesar Uno por Uno": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "RAG de Dominio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Formatear Salida Final",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Formatear Salida Final": {
      "main": [
        [
          {
            "node": "Json Valido?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consolidar Contexto": {
      "main": [
        [
          {
            "node": "Constructor de Prompt Dinámico",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Set Test Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9474ce09-be6c-493c-844c-eb7f8d0b4e33",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "81f9aa344da0912f901e07498089d3dd54ba6d767dbe4d581a261cb5d8886bb9"
  },
  "id": "ChIBB6KiCNlHa36x",
  "tags": []
}